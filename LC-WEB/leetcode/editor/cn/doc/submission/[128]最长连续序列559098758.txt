class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> numSet(nums.begin(), nums.end());
        int longestStreak = 0;

    for (int num : numSet) {
        // 如果当前数字是序列的起点
        if (numSet.find(num - 1) == numSet.end()) {
            int currentNum = num;
            int currentStreak = 1;

            // 检查下一个数字是否存在
            while (numSet.find(currentNum + 1) != numSet.end()) {
                currentNum += 1;
                currentStreak += 1;
            }

            // 更新最长序列
            longestStreak = max(longestStreak, currentStreak);
        }
    }

    return longestStreak;
    }
};
//runtime:137 ms
//memory:73 MB
