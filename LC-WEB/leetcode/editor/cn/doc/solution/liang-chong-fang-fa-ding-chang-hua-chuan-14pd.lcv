## 核心思路

设 $n$ 是 $p$ 的长度。本题有两种做法：

1. **定长滑窗**。枚举 $s$ 的所有长为 $n$ 的子串 $s'$，如果 $s'$ 的每种字母的出现次数，和 $p$ 的每种字母的出现次数都相同，那么 $s'$ 是 $p$ 的异位词。
2. **不定长滑窗**。枚举子串 $s'$ 的右端点，如果发现 $s'$ 其中一种字母的出现次数大于 $p$ 的这种字母的出现次数，则右移 $s'$ 的左端点。如果发现 $s'$ 的长度等于 $p$ 的长度，则说明 $s'$ 的每种字母的出现次数，和 $p$ 的每种字母的出现次数都相同（如果出现次数 $s'$ 的小于 $p$ 的，不可能长度一样），那么 $s'$ 是 $p$ 的异位词。

## 方法一：定长滑窗

原理请看[【套路】教你解决定长滑窗！适用于所有定长滑窗题目！](https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/2809359/tao-lu-jiao-ni-jie-jue-ding-chang-hua-ch-fzfo/)。

本题维护长为 $n$ 的子串 $s'$ 的每种字母的出现次数。如果 $s'$ 的每种字母的出现次数，和 $p$ 的每种字母的出现次数都相同，那么 $s'$ 是 $p$ 的异位词，把 $s'$ 左端点下标加入答案。

* [sol-Python3]

```py
# 请使用 Python3 提交代码！Python2 已经被淘汰了
class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        ans = []
        cnt_p = Counter(p)  # 统计 p 的每种字母的出现次数
        cnt_s = Counter()  # 统计 s 的长为 len(p) 的子串 s' 的每种字母的出现次数
        for right, c in enumerate(s):
            cnt_s[c] += 1  # 右端点字母进入窗口
            left = right - len(p) + 1
            if left < 0:  # 窗口长度不足 len(p)
                continue
            if cnt_s == cnt_p:  # s' 和 p 的每种字母的出现次数都相同
                ans.append(left)  # s' 左端点下标加入答案
            cnt_s[s[left]] -= 1  # 左端点字母离开窗口
        return ans
```

* [sol-Java]

```java
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> ans = new ArrayList<>();
        int[] cntP = new int[26]; // 统计 p 的每种字母的出现次数
        int[] cntS = new int[26]; // 统计 s 的长为 p.length() 的子串 s' 的每种字母的出现次数
        for (char c : p.toCharArray()) {
            cntP[c - 'a']++; // 统计 p 的字母
        }
        for (int right = 0; right < s.length(); right++) {
            cntS[s.charAt(right) - 'a']++; // 右端点字母进入窗口
            int left = right - p.length() + 1;
            if (left < 0) { // 窗口长度不足 p.length()
                continue;
            }
            if (Arrays.equals(cntS, cntP)) { // s' 和 p 的每种字母的出现次数都相同
                ans.add(left); // s' 左端点下标加入答案
            }
            cntS[s.charAt(left) - 'a']--; // 左端点字母离开窗口
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> ans;
        array<int, 26> cnt_p{}; // 统计 p 的每种字母的出现次数
        array<int, 26> cnt_s{}; // 统计 s 的长为 p.length() 的子串 s' 的每种字母的出现次数
        for (char c : p) {
            cnt_p[c - 'a']++;
        }
        for (int right = 0; right < s.length(); right++) {
            cnt_s[s[right] - 'a']++; // 右端点字母进入窗口
            int left = right - p.length() + 1;
            if (left < 0) { // 窗口长度不足 p.length()
                continue;
            }
            if (cnt_s == cnt_p) { // s' 和 p 的每种字母的出现次数都相同
                ans.push_back(left); // s' 左端点下标加入答案
            }
            cnt_s[s[left] - 'a']--; // 左端点字母离开窗口
        }
        return ans;
    }
};
```

* [sol-C]

```c
int* findAnagrams(char* s, char* p, int* returnSize) {
    int* ans = malloc(strlen(s) * sizeof(int));
    *returnSize = 0;
    int cnt_p[26] = {}; // 统计 p 的每种字母的出现次数
    int cnt_s[26] = {}; // 统计 s 的长为 n 的子串 s' 的每种字母的出现次数
    int n = 0;
    for (; p[n]; n++) {
        cnt_p[p[n] - 'a']++; // 统计 p 的字母
    }
    for (int right = 0; s[right]; right++) {
        cnt_s[s[right] - 'a']++; // 右端点字母进入窗口
        int left = right - n + 1;
        if (left < 0) { // 窗口长度不足 n
            continue;
        }
        if (memcmp(cnt_s, cnt_p, sizeof(cnt_s)) == 0) { // s' 和 p 的每种字母的出现次数都相同
            ans[(*returnSize)++] = left; // s' 左端点下标加入答案
        }
        cnt_s[s[left] - 'a']--; // 左端点字母离开窗口
    }
    return ans;
}
```

* [sol-Go]

```go
func findAnagrams(s, p string) (ans []int) {
    cntP := [26]int{} // 统计 p 的每种字母的出现次数
    cntS := [26]int{} // 统计 s 的长为 len(p) 的子串 s' 的每种字母的出现次数
    for _, c := range p {
        cntP[c-'a']++ // 统计 p 的字母
    }
    for right, c := range s {
        cntS[c-'a']++ // 右端点字母进入窗口
        left := right - len(p) + 1
        if left < 0 { // 窗口长度不足 len(p)
            continue
        }
        if cntS == cntP { // s' 和 p 的每种字母的出现次数都相同
            ans = append(ans, left) // s' 左端点下标加入答案
        }
        cntS[s[left]-'a']-- // 左端点字母离开窗口
    }
    return
}
```

* [sol-JavaScript]

```js
var findAnagrams = function(s, p) {
    const ans = [];
    const cntP = new Array(26).fill(0); // 统计 p 的每种字母的出现次数
    const cntS = new Array(26).fill(0); // 统计 s 的长为 len(p) 的子串 s' 的每种字母的出现次数
    for (const c of p) {
        cntP[c.charCodeAt() - 'a'.charCodeAt()]++; // 统计 p 的字母
    }
    for (let right = 0; right < s.length; right++) {
        cntS[s[right].charCodeAt() - 'a'.charCodeAt()]++; // 右端点字母进入窗口
        const left = right - p.length + 1;
        if (left < 0) { // 窗口长度不足 len(p)
            continue;
        }
        if (_.isEqual(cntS, cntP)) { // s' 和 p 的每种字母的出现次数都相同
            ans.push(left); // s' 左端点下标加入答案
        }
        cntS[s[left].charCodeAt() - 'a'.charCodeAt()]--; // 左端点字母离开窗口
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {
        let mut cnt_p = [0; 26]; // 统计 p 的每种字母的出现次数
        let mut cnt_s = [0; 26]; // 统计 s 的长为 p.len() 的子串 s' 的每种字母的出现次数
        for c in p.bytes() {
            cnt_p[(c - b'a') as usize] += 1; // 统计 p 的字母
        }

        let mut ans = vec![];
        let s = s.as_bytes();
        for (right, &c) in s.iter().enumerate() {
            cnt_s[(c - b'a') as usize] += 1; // 右端点字母进入窗口
            let left = right - p.len() + 1;
            if left >= s.len() { // 窗口长度不足 p.len()
                continue;
            }
            if cnt_s == cnt_p { // s' 和 p 的每种字母的出现次数都相同
                ans.push(left as i32); // s' 左端点下标加入答案
            }
            cnt_s[(s[left] - b'a') as usize] -= 1; // 左端点字母离开窗口
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(|\Sigma|m+n)$，其中 $m$ 是 $s$ 的长度，$n$ 是 $p$ 的长度，$|\Sigma|=26$ 是字符集合的大小。
- 空间复杂度：$\mathcal{O}(|\Sigma|)$。返回值不计入。

**注**：可以优化到 $\mathcal{O}(m+n)$ 或者 $\mathcal{O}(m)$，做法见我的 [76. 最小覆盖子串的题解](https://leetcode.cn/problems/minimum-window-substring/solutions/2713911/liang-chong-fang-fa-cong-o52mn-dao-omnfu-3ezz/)。

## 方法二：不定长滑窗

**前置知识**：[滑动窗口【基础算法精讲 03】](https://www.bilibili.com/video/BV1hd4y1r7Gq/)。

枚举子串 $s'$ 的右端点，如果发现 $s'$ 其中一种字母的出现次数**大于** $p$ 的这种字母的出现次数，则右移 $s'$ 的左端点。如果发现 $s'$ 的长度等于 $p$ 的长度，则说明 $s'$ 的每种字母的出现次数，和 $p$ 的每种字母的出现次数都相同，那么 $s'$ 是 $p$ 的异位词。

**证明**：内层循环结束后，$s'$ 的每种字母的出现次数，都小于等于 $p$ 的每种字母的出现次数。如果 $s'$ 的其中一种字母的出现次数比 $p$ 的小，那么 $s'$ 的长度必然小于 $p$ 的长度。所以只要 $s'$ 的长度等于 $p$ 的长度，就说明 $s'$ 的每种字母的出现次数，和 $p$ 的每种字母的出现次数都相同，$s'$ 是 $p$ 的异位词，把 $s'$ 左端点下标加入答案。

代码实现时，可以把 $\textit{cntS}$ 和 $\textit{cntP}$ 合并成一个 $\textit{cnt}$：

- 对于 $p$ 的字母 $c$，把 $\textit{cnt}[p]$ 加一。
- 对于 $s'$ 的字母 $c$，把 $\textit{cnt}[c]$ 减一。
- 如果 $\textit{cnt}[c]<0$，说明窗口中的字母 $c$ 的个数比 $p$ 的多，右移左端点。

### 答疑

**问**：为什么只需判断字母 $c$ 的出现次数？

**答**：字母 $c$ 进入窗口后，如果导致 $\textit{cnt}[c]<0$，由于其余字母的出现次数没有变化，所以有且仅有字母 $c$ 的个数比 $p$ 的多。

* [sol-Python3]

```py
class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        ans = []
        cnt = Counter(p)  # 统计 p 的每种字母的出现次数
        left = 0
        for right, c in enumerate(s):
            cnt[c] -= 1  # 右端点字母进入窗口
            while cnt[c] < 0:  # 字母 c 太多了
                cnt[s[left]] += 1  # 左端点字母离开窗口
                left += 1
            if right - left + 1 == len(p):  # s' 和 p 的每种字母的出现次数都相同
                ans.append(left)  # s' 左端点下标加入答案
        return ans
```

* [sol-Java]

```java
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> ans = new ArrayList<>();
        int[] cnt = new int[26]; // 统计 p 的每种字母的出现次数
        for (char c : p.toCharArray()) {
            cnt[c - 'a']++;
        }
        int left = 0;
        for (int right = 0; right < s.length(); right++) {
            int c = s.charAt(right) - 'a';
            cnt[c]--; // 右端点字母进入窗口
            while (cnt[c] < 0) { // 字母 c 太多了
                cnt[s.charAt(left) - 'a']++; // 左端点字母离开窗口
                left++;
            }
            if (right - left + 1 == p.length()) { // s' 和 p 的每种字母的出现次数都相同
                ans.add(left); // s' 左端点下标加入答案
            }
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> ans;
        int cnt[26]{}; // 统计 p 的每种字母的出现次数
        for (char c : p) {
            cnt[c - 'a']++;
        }
        int left = 0;
        for (int right = 0; right < s.size(); right++) {
            int c = s[right] - 'a';
            cnt[c]--; // 右端点字母进入窗口
            while (cnt[c] < 0) { // 字母 c 太多了
                cnt[s[left] - 'a']++; // 左端点字母离开窗口
                left++; 
            }
            if (right - left + 1 == p.length()) { // s' 和 p 的每种字母的出现次数都相同
                ans.push_back(left); // s' 左端点下标加入答案
            }
        }
        return ans;
    }
};
```

* [sol-C]

```c
int* findAnagrams(char* s, char* p, int* returnSize) {
    int* ans = malloc(strlen(s) * sizeof(int));
    *returnSize = 0;
    int cnt[26] = {}; // 统计 p 的每种字母的出现次数
    int n = 0;
    for (; p[n]; n++) {
        cnt[p[n] - 'a']++;
    }
    int left = 0;
    for (int right = 0; s[right]; right++) {
        int c = s[right] - 'a';
        cnt[c]--; // 右端点字母进入窗口
        while (cnt[c] < 0) { // 字母 c 太多了
            cnt[s[left] - 'a']++; // 左端点字母离开窗口
            left++;
        }
        if (right - left + 1 == n) { // s' 和 p 的每种字母的出现次数都相同
            ans[(*returnSize)++] = left; // s' 左端点下标加入答案
        }
    }
    return ans;
}
```

* [sol-Go]

```go
func findAnagrams(s, p string) (ans []int) {
    cnt := [26]int{} // 统计 p 的每种字母的出现次数
    for _, c := range p {
        cnt[c-'a']++
    }
    left := 0
    for right, c := range s {
        c -= 'a'
        cnt[c]-- // 右端点字母进入窗口
        for cnt[c] < 0 { // 字母 c 太多了
            cnt[s[left]-'a']++ // 左端点字母离开窗口
            left++
        }
        if right-left+1 == len(p) { // s' 和 p 的每种字母的出现次数都相同
            ans = append(ans, left) // s' 左端点下标加入答案
        }
    }
    return
}
```

* [sol-JavaScript]

```js
var findAnagrams = function(s, p) {
    const ans = [];
    const cnt = new Array(26).fill(0); // 统计 p 的每种字母的出现次数
    for (const c of p) {
        cnt[c.charCodeAt() - 'a'.charCodeAt()]++;
    }
    let left = 0;
    for (let right = 0; right < s.length; right++) {
        const c = s[right].charCodeAt() - 'a'.charCodeAt();
        cnt[c]--; // 右端点字母进入窗口
        while (cnt[c] < 0) { // 字母 c 太多了
            cnt[s[left].charCodeAt() - 'a'.charCodeAt()]++; // 左端点字母离开窗口
            left++;
        }
        if (right - left + 1 === p.length) { // s' 和 p 的每种字母的出现次数都相同
            ans.push(left); // s' 左端点下标加入答案
        }
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {
        let mut cnt = [0; 26]; // 统计 p 的每种字母的出现次数
        for c in p.bytes() {
            cnt[(c - b'a') as usize] += 1; // 统计 p 的字母
        }

        let mut ans = vec![];
        let s = s.as_bytes();
        let mut left = 0;
        for (right, &c) in s.iter().enumerate() {
            let c = (c - b'a') as usize;
            cnt[c] -= 1; // 右端点字母进入窗口
            while cnt[c] < 0 { // 字母 c 太多了
                cnt[(s[left] - b'a') as usize] += 1; // 左端点字母离开窗口
                left += 1;
            }
            if right - left + 1 == p.len() { // s' 和 p 的每种字母的出现次数都相同
                ans.push(left as i32); // s' 左端点下标加入答案
            }
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(m+n)$，其中 $m$ 是 $s$ 的长度，$n$ 是 $p$ 的长度。虽然写了个二重循环，但是内层循环中对 $\textit{left}$ 加一的**总**执行次数不会超过 $m$ 次，所以滑窗的时间复杂度为 $\mathcal{O}(m)$。
- 空间复杂度：$\mathcal{O}(|\Sigma|)$，其中 $|\Sigma|=26$ 是字符集合的大小。返回值不计入。

**注**：如果特判 $m<n$ 的情况（直接返回空列表），则时间复杂度为 $\mathcal{O}(m)$。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针/分组循环）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与回溯（前后指针/快慢指针/DFS/BFS/直径/LCA/一般树）](https://leetcode.cn/circle/discuss/K0n2gO/)
12. [字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）](https://leetcode.cn/circle/discuss/SJFwQI/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
