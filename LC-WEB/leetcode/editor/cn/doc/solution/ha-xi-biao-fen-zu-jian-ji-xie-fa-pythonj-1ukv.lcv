## 题意解读

如果两个字符串从小到大排序后相等，那么两个字符串就互为字母异位词，否则不是。

例如 $\texttt{aab},\texttt{aba},\texttt{baa}$ 排序后都是 $\texttt{aab}$，所以 $\texttt{aab},\texttt{aba},\texttt{baa}$ 互为字母异位词。

## 示例 1 是怎么算的？

输入 $\textit{strs} = [\texttt{eat},\texttt{tea},\texttt{tan},\texttt{ate},\texttt{nat},\texttt{bat}]$。

每个字符串各自排序，得到 $\texttt{aet},\texttt{aet},\texttt{ant},\texttt{aet},\texttt{ant},\texttt{abt}$。

把排序后相同的字符串分到同一组：

- 排序后是 $\texttt{aet}$ 的字符串，排序前是 $\texttt{eat},\texttt{tea},\texttt{ate}$。
- 排序后是 $\texttt{ant}$ 的字符串，排序前是 $\texttt{tan},\texttt{nat}$。
- 排序后是 $\texttt{abt}$ 的字符串，排序前是 $\texttt{bat}$。

因此，示例 1 返回的二维列表中，包含三个列表，分别为

- $[\texttt{eat},\texttt{tea},\texttt{ate}]$。
- $[\texttt{tan},\texttt{nat}]$。
- $[\texttt{bat}]$。

三个列表的顺序随意。

## 算法

用哈希表分组，把排序后的字符串当作哈希表的 key，排序前的字符串加到对应的列表中（哈希表的 value）。

最后把哈希表的所有 value 加到一个列表中返回。

* [sol-Python3]

```py
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        d = defaultdict(list)  # 如果 key 不在字典中，则自动插入一个空列表
        for s in strs:
            sorted_s = ''.join(sorted(s))  # 把 s 排序，作为哈希表的 key
            d[sorted_s].append(s)  # 排序后相同的字符串分到同一组
        return list(d.values())  # 哈希表的 value 保存分组后的结果
```

* [sol-Java]

```java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> m = new HashMap<>();
        for (String s : strs) {
            // 把 s 排序，作为哈希表的 key
            char[] sortedS = s.toCharArray();
            Arrays.sort(sortedS);
            // 排序后相同的字符串分到同一组
            // computeIfAbsent：如果 key 不在哈希表中，则插入一个新的 ArrayList
            m.computeIfAbsent(new String(sortedS), _ -> new ArrayList<>()).add(s);
        }
        // 哈希表的 value 保存分组后的结果
        return new ArrayList<>(m.values()); 
    }
}
```

* [sol-JavaStream]

```java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        return new ArrayList<>(
            Arrays.stream(strs)
                  .collect(Collectors.groupingBy(s -> {
                      char[] sortedS = s.toCharArray();
                      Arrays.sort(sortedS);
                      return new String(sortedS);
                  }))
                  .values()
        );
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> m;
        for (string& s : strs) {
            string sorted_s = s;
            ranges::sort(sorted_s); // 把 s 排序，作为哈希表的 key
            m[sorted_s].push_back(s); // 排序后相同的字符串分到同一组
        }

        vector<vector<string>> ans;
        ans.reserve(m.size()); // 预分配空间
        for (auto& [_, value] : m) {
            ans.push_back(value); // 哈希表的 value 保存分组后的结果
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func groupAnagrams(strs []string) [][]string {
    m := map[string][]string{}
    for _, s := range strs {
        // 把 s 排序，作为哈希表的 key
        tmp := []byte(s)
        slices.Sort(tmp)
        sortedS := string(tmp)
        // 排序后相同的字符串分到同一组
        m[sortedS] = append(m[sortedS], s)
    }
    // 哈希表的 value 保存分组后的结果
    return slices.Collect(maps.Values(m))
}
```

* [sol-JS]

```js
var groupAnagrams = function(strs) {
    const m = new Map();
    for (const s of strs) {
        // 把 s 排序，作为哈希表的 key
        const sortedS = s.split('').sort().join('');
        if (!m.has(sortedS)) {
            m.set(sortedS, []);
        }
        // 排序后相同的字符串分到同一组
        m.get(sortedS).push(s);
    }
    // 哈希表的 value 保存分组后的结果
    return Array.from(m.values());
};
```

* [sol-JSlodash]

```js
var groupAnagrams = function(strs) {
    const g = _.groupBy(strs, s => s.split('').sort().join(''));
    return Object.values(g);
};
```

* [sol-Rust]

```rust
use std::collections::HashMap;

impl Solution {
    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {
        let mut m = HashMap::new();
        for s in strs {
            // 把 s 排序，作为哈希表的 key
            let mut sorted_s = s.clone().into_bytes();
            sorted_s.sort_unstable();
            // 排序后相同的字符串分到同一组
            m.entry(sorted_s).or_insert(vec![]).push(s);
        }
        // 哈希表的 value 保存分组后的结果
        m.into_values().collect()
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(nm\log m)$，其中 $n$ 为 $\textit{strs}$ 的长度，$m$ 为 $\textit{strs}[i]$ 的长度。每个字符串排序需要 $\mathcal{O}(m\log m)$ 的时间。我们有 $n$ 个字符串，所以总的时间复杂度为 $\mathcal{O}(nm\log m)$。
- 空间复杂度：$\mathcal{O}(nm)$。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针/分组循环）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与回溯（前后指针/快慢指针/DFS/BFS/直径/LCA/一般树）](https://leetcode.cn/circle/discuss/K0n2gO/)
12. [字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）](https://leetcode.cn/circle/discuss/SJFwQI/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
